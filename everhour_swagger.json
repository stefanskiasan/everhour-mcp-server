{
  "openapi": "3.0.3",
  "info": {
    "title": "Everhour API",
    "description": "The Everhour API is currently in BETA. RESTful interface providing programmatic access to much of the data in the system. All time columns are in seconds (e.g., 3600 = one hour). All amounts are in cents (e.g., 500 = $5.00).",
    "version": "1.2",
    "contact": {
      "email": "ask@everhour.com"
    }
  },
  "servers": [
    {
      "url": "https://api.everhour.com",
      "description": "Production server"
    }
  ],
  "security": [
    {
      "ApiKeyAuth": []
    }
  ],
  "components": {
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-Api-Key",
        "description": "API key for authentication. You can find your API key in your profile."
      }
    },
    "parameters": {
      "VersionHeader": {
        "name": "X-Accept-Version",
        "in": "header",
        "description": "API version",
        "schema": {
          "type": "string",
          "default": "1.2"
        }
      },
      "DateFrom": {
        "name": "from",
        "in": "query",
        "description": "Date from",
        "schema": {
          "type": "string",
          "format": "date",
          "example": "2018-01-01"
        }
      },
      "DateTo": {
        "name": "to",
        "in": "query",
        "description": "Date to",
        "schema": {
          "type": "string",
          "format": "date",
          "example": "2018-01-31"
        }
      },
      "Limit": {
        "name": "limit",
        "in": "query",
        "description": "Max results for pagination",
        "schema": {
          "type": "integer",
          "example": 100
        }
      },
      "Page": {
        "name": "page",
        "in": "query",
        "description": "Page number",
        "schema": {
          "type": "integer",
          "example": 1
        }
      }
    },
    "schemas": {
      "TimeRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Time record ID",
            "example": 2660155
          },
          "time": {
            "type": "integer",
            "description": "Time recorded in seconds",
            "example": 3600
          },
          "user": {
            "type": "integer",
            "description": "User ID",
            "example": 1304
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "Date",
            "example": "2018-01-20"
          },
          "task": {
            "$ref": "#/components/schemas/Task"
          },
          "isLocked": {
            "type": "boolean",
            "example": false
          },
          "isInvoiced": {
            "type": "boolean",
            "example": false
          },
          "comment": {
            "type": "string",
            "example": "some notes"
          },
          "history": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": ["id", "time", "user", "date"]
      },
      "Task": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "ev:9876543210"
          },
          "name": {
            "type": "string",
            "example": "Task Name"
          },
          "projects": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["ev:1234567890"]
          },
          "section": {
            "type": "integer",
            "example": 1234
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["high", "bug"]
          },
          "position": {
            "type": "integer",
            "example": 1
          },
          "dueAt": {
            "type": "string",
            "format": "date-time",
            "example": "2018-03-05 16:00:00"
          },
          "status": {
            "type": "string",
            "example": "open"
          },
          "time": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer",
                "example": 7200
              },
              "users": {
                "type": "object",
                "additionalProperties": {
                  "type": "integer"
                },
                "example": {
                  "1304": 3600,
                  "1543": 3600
                }
              }
            }
          },
          "estimate": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer",
                "example": 7200
              },
              "type": {
                "type": "string",
                "example": "overall"
              },
              "users": {
                "type": "object",
                "additionalProperties": {
                  "type": "integer"
                },
                "example": {
                  "1304": 3600,
                  "1543": 3600
                }
              }
            }
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "Client": "Everhour",
              "Priority": "hight"
            }
          },
          "metrics": {
            "type": "object",
            "properties": {
              "efforts": {
                "type": "integer",
                "example": 42
              },
              "expenses": {
                "type": "integer",
                "example": 199
              }
            }
          }
        }
      },
      "Client": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "businessDetails": {
            "type": "object"
          }
        }
      },
      "Project": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "workspaceId": {
            "type": "integer"
          },
          "billing": {
            "type": "object"
          },
          "budget": {
            "type": "object"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "status": {
            "type": "string"
          }
        }
      },
      "Invoice": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "number": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": ["draft", "sent", "paid"]
          },
          "total": {
            "type": "integer",
            "description": "Total amount in cents"
          }
        }
      },
      "Expense": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "amount": {
            "type": "integer",
            "description": "Amount in cents"
          },
          "date": {
            "type": "string",
            "format": "date"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "Timer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "task": {
            "$ref": "#/components/schemas/Task"
          },
          "user": {
            "type": "integer"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time"
          },
          "duration": {
            "type": "integer",
            "description": "Duration in seconds"
          }
        }
      },
      "Timecard": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "user": {
            "type": "integer"
          },
          "date": {
            "type": "string",
            "format": "date"
          },
          "clockIn": {
            "type": "string",
            "format": "time"
          },
          "clockOut": {
            "type": "string",
            "format": "time"
          }
        }
      },
      "Assignment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "user": {
            "type": "integer"
          },
          "project": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date"
          },
          "hours": {
            "type": "integer"
          }
        }
      }
    }
  },
  "paths": {


    "/team/time": {
      "get": {
        "tags": ["Time Records"],
        "summary": "Get All Time Records",
        "description": "Retrieve all time records for the team",
        "parameters": [
          {
            "$ref": "#/components/parameters/DateFrom"
          },
          {
            "$ref": "#/components/parameters/DateTo"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeRecord"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/time": {
      "get": {
        "tags": ["Time Records"],
        "summary": "Get User Time Records",
        "description": "Retrieve time records for a specific user",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "description": "User ID",
            "schema": {
              "type": "integer",
              "example": 89
            }
          },
          {
            "$ref": "#/components/parameters/DateFrom"
          },
          {
            "$ref": "#/components/parameters/DateTo"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeRecord"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{task_id}/time": {
      "get": {
        "tags": ["Time Records"],
        "summary": "Get Task Time Records",
        "description": "Retrieve time records for a specific task",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "description": "Task ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/DateFrom"
          },
          {
            "$ref": "#/components/parameters/DateTo"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeRecord"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/time": {
      "get": {
        "tags": ["Time Records"],
        "summary": "Get Project Time Records",
        "description": "Retrieve time records for a specific project",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/DateFrom"
          },
          {
            "$ref": "#/components/parameters/DateTo"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeRecord"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/time": {
      "post": {
        "tags": ["Time Records"],
        "summary": "Add Time",
        "description": "Add a new time record",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "time": {
                    "type": "integer",
                    "description": "Time in seconds"
                  },
                  "user": {
                    "type": "integer",
                    "description": "User ID"
                  },
                  "date": {
                    "type": "string",
                    "format": "date"
                  },
                  "task": {
                    "type": "string",
                    "description": "Task ID"
                  },
                  "comment": {
                    "type": "string"
                  }
                },
                "required": ["time", "user", "date", "task"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Time record created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeRecord"
                }
              }
            }
          }
        }
      }
    },
    "/time/{time_id}": {
      "put": {
        "tags": ["Time Records"],
        "summary": "Update Time Record",
        "description": "Update an existing time record",
        "parameters": [
          {
            "name": "time_id",
            "in": "path",
            "required": true,
            "description": "Time record ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "time": {
                    "type": "integer"
                  },
                  "comment": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Time record updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeRecord"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Time Records"],
        "summary": "Delete Time Record",
        "description": "Delete a time record",
        "parameters": [
          {
            "name": "time_id",
            "in": "path",
            "required": true,
            "description": "Time record ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Time record deleted"
          }
        }
      }
    },


    "/clients": {
      "get": {
        "tags": ["Clients"],
        "summary": "Get All Clients",
        "description": "Retrieve all clients",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Client"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Clients"],
        "summary": "Create Client",
        "description": "Create a new client",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "businessDetails": {
                    "type": "object"
                  }
                },
                "required": ["name"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Client created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              }
            }
          }
        }
      }
    },
    "/clients/{client_id}": {
      "get": {
        "tags": ["Clients"],
        "summary": "Get Client",
        "description": "Retrieve a specific client",
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "description": "Client ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Clients"],
        "summary": "Update Client",
        "description": "Update an existing client",
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "description": "Client ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "businessDetails": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Client updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              }
            }
          }
        }
      }
    },
    "/clients/{client_id}/budget": {
      "put": {
        "tags": ["Clients"],
        "summary": "Update Client Budget",
        "description": "Update client budget",
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "description": "Client ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "budget": {
                    "type": "integer",
                    "description": "Budget amount in cents"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Budget updated"
          }
        }
      },
      "delete": {
        "tags": ["Clients"],
        "summary": "Delete Client Budget",
        "description": "Delete client budget",
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "description": "Client ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Budget deleted"
          }
        }
      }
    },


    "/projects": {
      "get": {
        "tags": ["Projects"],
        "summary": "Get All Projects",
        "description": "Retrieve all projects",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Projects"],
        "summary": "Create Project",
        "description": "Create a new project",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "workspaceId": {
                    "type": "integer"
                  }
                },
                "required": ["name"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Project created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}": {
      "get": {
        "tags": ["Projects"],
        "summary": "Get Project",
        "description": "Retrieve a specific project",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Projects"],
        "summary": "Update Project",
        "description": "Update an existing project",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Projects"],
        "summary": "Delete Project",
        "description": "Delete a project",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Project deleted"
          }
        }
      }
    },
    "/projects/{project_id}/billing": {
      "put": {
        "tags": ["Projects"],
        "summary": "Update Project Billing/Budget",
        "description": "Update project billing and budget information",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "billing": {
                    "type": "object"
                  },
                  "budget": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project billing/budget updated"
          }
        }
      }
    },
    "/projects/{project_id}/sections": {
      "get": {
        "tags": ["Projects"],
        "summary": "Get Project Sections",
        "description": "Retrieve sections for a specific project",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer"
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Projects"],
        "summary": "Create Section",
        "description": "Create a new section in a project",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  }
                },
                "required": ["name"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Section created"
          }
        }
      }
    },
    "/sections/{section_id}": {
      "get": {
        "tags": ["Projects"],
        "summary": "Get Section",
        "description": "Retrieve a specific section",
        "parameters": [
          {
            "name": "section_id",
            "in": "path",
            "required": true,
            "description": "Section ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Projects"],
        "summary": "Update Section",
        "description": "Update an existing section",
        "parameters": [
          {
            "name": "section_id",
            "in": "path",
            "required": true,
            "description": "Section ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Section updated"
          }
        }
      }
    },


    "/projects/{project_id}/tasks": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Get Project Tasks",
        "description": "Retrieve tasks for a specific project",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Tasks"],
        "summary": "Create Task",
        "description": "Create a new task in a project",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "section": {
                    "type": "integer"
                  },
                  "labels": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": ["name"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Task created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{task_id}": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Get Task",
        "description": "Retrieve a specific task",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "description": "Task ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Tasks"],
        "summary": "Update Task",
        "description": "Update an existing task",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "description": "Task ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "labels": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Tasks"],
        "summary": "Delete Task",
        "description": "Delete a task",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "description": "Task ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Task deleted"
          }
        }
      }
    },
    "/tasks/search": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Search Tasks",
        "description": "Search for tasks",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Search query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/tasks/search": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Search Project Tasks",
        "description": "Search for tasks within a specific project",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "Search query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{task_id}/estimate": {
      "put": {
        "tags": ["Tasks"],
        "summary": "Update Task Estimate",
        "description": "Update task estimate",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "description": "Task ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "total": {
                    "type": "integer",
                    "description": "Total estimate in seconds"
                  },
                  "type": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Estimate updated"
          }
        }
      },
      "delete": {
        "tags": ["Tasks"],
        "summary": "Delete Task Estimate",
        "description": "Delete task estimate",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "description": "Task ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Estimate deleted"
          }
        }
      }
    },


    "/timers": {
      "post": {
        "tags": ["Timers"],
        "summary": "Start Timer",
        "description": "Start a new timer",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "task": {
                    "type": "string",
                    "description": "Task ID"
                  },
                  "user": {
                    "type": "integer",
                    "description": "User ID"
                  }
                },
                "required": ["task", "user"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Timer started",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Timer"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Timers"],
        "summary": "Get All Team Timers",
        "description": "Retrieve all running timers for the team",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Timer"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/timers/current": {
      "get": {
        "tags": ["Timers"],
        "summary": "Get Running Timer",
        "description": "Get the current running timer for the authenticated user",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Timer"
                }
              }
            }
          }
        }
      }
    },
    "/timers/{timer_id}/stop": {
      "post": {
        "tags": ["Timers"],
        "summary": "Stop Timer",
        "description": "Stop a running timer",
        "parameters": [
          {
            "name": "timer_id",
            "in": "path",
            "required": true,
            "description": "Timer ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Timer stopped",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeRecord"
                }
              }
            }
          }
        }
      }
    },


    "/timecards": {
      "get": {
        "tags": ["Timecards"],
        "summary": "Get All Timecards",
        "description": "Retrieve all timecards",
        "parameters": [
          {
            "$ref": "#/components/parameters/DateFrom"
          },
          {
            "$ref": "#/components/parameters/DateTo"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Timecard"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/timecards/{timecard_id}": {
      "get": {
        "tags": ["Timecards"],
        "summary": "Get Timecard",
        "description": "Retrieve a specific timecard",
        "parameters": [
          {
            "name": "timecard_id",
            "in": "path",
            "required": true,
            "description": "Timecard ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Timecard"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Timecards"],
        "summary": "Update Timecard",
        "description": "Update an existing timecard",
        "parameters": [
          {
            "name": "timecard_id",
            "in": "path",
            "required": true,
            "description": "Timecard ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "clockIn": {
                    "type": "string",
                    "format": "time"
                  },
                  "clockOut": {
                    "type": "string",
                    "format": "time"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Timecard updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Timecard"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Timecards"],
        "summary": "Delete Timecard",
        "description": "Delete a timecard",
        "parameters": [
          {
            "name": "timecard_id",
            "in": "path",
            "required": true,
            "description": "Timecard ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Timecard deleted"
          }
        }
      }
    },
    "/users/{user_id}/timecards": {
      "get": {
        "tags": ["Timecards"],
        "summary": "Get User Timecards",
        "description": "Retrieve timecards for a specific user",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "description": "User ID",
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/DateFrom"
          },
          {
            "$ref": "#/components/parameters/DateTo"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Timecard"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/timecards/clock-in": {
      "post": {
        "tags": ["Timecards"],
        "summary": "Clock In",
        "description": "Clock in for the current user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user": {
                    "type": "integer",
                    "description": "User ID"
                  },
                  "date": {
                    "type": "string",
                    "format": "date"
                  }
                },
                "required": ["user"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Clocked in successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Timecard"
                }
              }
            }
          }
        }
      }
    },
    "/timecards/clock-out": {
      "post": {
        "tags": ["Timecards"],
        "summary": "Clock Out",
        "description": "Clock out for the current user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user": {
                    "type": "integer",
                    "description": "User ID"
                  }
                },
                "required": ["user"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Clocked out successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Timecard"
                }
              }
            }
          }
        }
      }
    },


    "/users": {
      "get": {
        "tags": ["Users"],
        "summary": "Get All Users",
        "description": "Retrieve all users",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "tags": ["Users"],
        "summary": "Get Current User",
        "description": "Retrieve the current authenticated user",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/invoices": {
      "get": {
        "tags": ["Invoices"],
        "summary": "Get All Invoices",
        "description": "Retrieve all invoices",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Invoice"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Invoices"],
        "summary": "Create Invoice",
        "description": "Create a new invoice",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "number": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string",
                    "enum": ["draft", "sent", "paid"]
                  }
                },
                "required": ["number"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Invoice created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          }
        }
      }
    },
    "/invoices/{invoice_id}": {
      "get": {
        "tags": ["Invoices"],
        "summary": "Get Invoice",
        "description": "Retrieve a specific invoice",
        "parameters": [
          {
            "name": "invoice_id",
            "in": "path",
            "required": true,
            "description": "Invoice ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Invoices"],
        "summary": "Update Invoice",
        "description": "Update an existing invoice",
        "parameters": [
          {
            "name": "invoice_id",
            "in": "path",
            "required": true,
            "description": "Invoice ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": ["draft", "sent", "paid"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Invoice updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Invoices"],
        "summary": "Delete Invoice",
        "description": "Delete an invoice",
        "parameters": [
          {
            "name": "invoice_id",
            "in": "path",
            "required": true,
            "description": "Invoice ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Invoice deleted"
          }
        }
      }
    },
    "/invoices/{invoice_id}/refresh": {
      "post": {
        "tags": ["Invoices"],
        "summary": "Refresh Invoice Line Items",
        "description": "Refresh line items for an invoice",
        "parameters": [
          {
            "name": "invoice_id",
            "in": "path",
            "required": true,
            "description": "Invoice ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Line items refreshed"
          }
        }
      }
    },
    "/invoices/{invoice_id}/status": {
      "put": {
        "tags": ["Invoices"],
        "summary": "Mark Invoice as Draft/Sent/Paid",
        "description": "Update invoice status",
        "parameters": [
          {
            "name": "invoice_id",
            "in": "path",
            "required": true,
            "description": "Invoice ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": ["draft", "sent", "paid"]
                  }
                },
                "required": ["status"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Status updated"
          }
        }
      }
    },
    "/invoices/{invoice_id}/export": {
      "post": {
        "tags": ["Invoices"],
        "summary": "Export Invoice to Xero/QB/FB",
        "description": "Export invoice to external accounting systems",
        "parameters": [
          {
            "name": "invoice_id",
            "in": "path",
            "required": true,
            "description": "Invoice ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "system": {
                    "type": "string",
                    "enum": ["xero", "quickbooks", "freshbooks"]
                  }
                },
                "required": ["system"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Invoice exported"
          }
        }
      }
    },
    "/expenses": {
      "get": {
        "tags": ["Expenses"],
        "summary": "Get All Expenses",
        "description": "Retrieve all expenses",
        "parameters": [
          {
            "$ref": "#/components/parameters/DateFrom"
          },
          {
            "$ref": "#/components/parameters/DateTo"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Expense"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Expenses"],
        "summary": "Create Expense",
        "description": "Create a new expense",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "integer",
                    "description": "Amount in cents"
                  },
                  "date": {
                    "type": "string",
                    "format": "date"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "required": ["amount", "date"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Expense created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Expense"
                }
              }
            }
          }
        }
      }
    },
    "/expenses/{expense_id}": {
      "put": {
        "tags": ["Expenses"],
        "summary": "Update Expense",
        "description": "Update an existing expense",
        "parameters": [
          {
            "name": "expense_id",
            "in": "path",
            "required": true,
            "description": "Expense ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "integer"
                  },
                  "description": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expense updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Expense"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Expenses"],
        "summary": "Delete Expense",
        "description": "Delete an expense",
        "parameters": [
          {
            "name": "expense_id",
            "in": "path",
            "required": true,
            "description": "Expense ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Expense deleted"
          }
        }
      }
    },
    "/expenses/categories": {
      "get": {
        "tags": ["Expenses"],
        "summary": "Get All Categories",
        "description": "Retrieve all expense categories",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer"
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Expenses"],
        "summary": "Create Category",
        "description": "Create a new expense category",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  }
                },
                "required": ["name"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Category created"
          }
        }
      }
    },
    "/expenses/categories/{category_id}": {
      "put": {
        "tags": ["Expenses"],
        "summary": "Update Category",
        "description": "Update an existing expense category",
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "required": true,
            "description": "Category ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Category updated"
          }
        }
      },
      "delete": {
        "tags": ["Expenses"],
        "summary": "Delete Category",
        "description": "Delete an expense category",
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "required": true,
            "description": "Category ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Category deleted"
          }
        }
      }
    },
    "/expenses/attachments": {
      "post": {
        "tags": ["Expenses"],
        "summary": "Create Attachment",
        "description": "Create a new attachment for expenses",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Attachment created"
          }
        }
      }
    },
    "/expenses/{expense_id}/attachments": {
      "post": {
        "tags": ["Expenses"],
        "summary": "Add Attachment To Expense",
        "description": "Add an attachment to an expense",
        "parameters": [
          {
            "name": "expense_id",
            "in": "path",
            "required": true,
            "description": "Expense ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "attachmentId": {
                    "type": "integer"
                  }
                },
                "required": ["attachmentId"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Attachment added to expense"
          }
        }
      }
    },
    "/schedule/assignments": {
      "get": {
        "tags": ["Schedule"],
        "summary": "Get All Assignments",
        "description": "Retrieve all schedule assignments",
        "parameters": [
          {
            "$ref": "#/components/parameters/DateFrom"
          },
          {
            "$ref": "#/components/parameters/DateTo"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Assignment"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Schedule"],
        "summary": "Create Assignment",
        "description": "Create a new schedule assignment",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user": {
                    "type": "integer"
                  },
                  "project": {
                    "type": "string"
                  },
                  "date": {
                    "type": "string",
                    "format": "date"
                  },
                  "hours": {
                    "type": "integer"
                  }
                },
                "required": ["user", "project", "date", "hours"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Assignment created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Assignment"
                }
              }
            }
          }
        }
      }
    },
    "/schedule/assignments/{assignment_id}": {
      "put": {
        "tags": ["Schedule"],
        "summary": "Update Assignment",
        "description": "Update an existing schedule assignment",
        "parameters": [
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "description": "Assignment ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "hours": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Assignment updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Assignment"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Schedule"],
        "summary": "Delete Assignment",
        "description": "Delete a schedule assignment",
        "parameters": [
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "description": "Assignment ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Assignment deleted"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Time Records",
      "description": "Operations related to time tracking records"
    },
    {
      "name": "Clients",
      "description": "Operations related to client management"
    },
    {
      "name": "Projects",
      "description": "Operations related to project management"
    },
    {
      "name": "Tasks",
      "description": "Operations related to task management"
    },
    {
      "name": "Timers",
      "description": "Operations related to time tracking timers"
    },
    {
      "name": "Timecards",
      "description": "Operations related to timecard management"
    },
    {
      "name": "Users",
      "description": "Operations related to user management"
    },
    {
      "name": "Invoices",
      "description": "Operations related to invoice management"
    },
    {
      "name": "Expenses",
      "description": "Operations related to expense management"
    },
    {
      "name": "Schedule",
      "description": "Operations related to schedule management"
    }
  ]
}

